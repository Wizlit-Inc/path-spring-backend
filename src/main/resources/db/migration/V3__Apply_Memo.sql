-- V3__Apply_Memo_and_Schema.sql

DROP TABLE IF EXISTS last_update;

-- 1) Create the `user` table
CREATE TABLE IF NOT EXISTS path_user (
    user_id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name                VARCHAR(255) NOT NULL UNIQUE,
    user_email               VARCHAR(255) NOT NULL UNIQUE,
    user_avatar              TEXT,
    user_created_timestamp   TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_updated_timestamp   TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 2) Create default admin user
INSERT INTO path_user (user_name, user_email, user_avatar)
VALUES ('Admin', 'admin@wizlit.com', 'https://lh3.googleusercontent.com/a/ACg8ocK1VoXmZiBuKquck6Rk46p4CJgb8RLSOtrFuTB_GomxJNyX4g=s96-c-br100-rg-mo');

-- 3) Create the `revision_content` table
CREATE TABLE IF NOT EXISTS revision_content (
    content_id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_size       BIGINT,
    content_address    TEXT      NOT NULL,
    content_compressed BOOLEAN   NOT NULL DEFAULT FALSE
);

-- 4) First rename point table columns to ensure point_id exists
ALTER TABLE point
    RENAME COLUMN id TO point_id;
ALTER TABLE point
    RENAME COLUMN title TO point_title;
ALTER TABLE point
    RENAME COLUMN created_on TO point_created_timestamp;

-- 5) Create the `memo` table (omit latest_revision FK for now)
CREATE TABLE IF NOT EXISTS memo (
    memo_id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    memo_point               BIGINT        NOT NULL REFERENCES point(point_id) ON DELETE RESTRICT,
    memo_title               VARCHAR(300)  NOT NULL UNIQUE,
    memo_summary             TEXT,
    memo_summary_timestamp   TIMESTAMPTZ,
    memo_created_timestamp   TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    memo_updated_timestamp   TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    memo_created_user        BIGINT        NOT NULL REFERENCES path_user(user_id) ON DELETE RESTRICT,
    memo_latest_revision     BIGINT,
    memo_embed_content       TEXT
);
CREATE INDEX IF NOT EXISTS idx_memo_point ON memo(memo_point);

-- 6) Migrate existing point.document into new `memo` rows
INSERT INTO memo (
    memo_point,
    memo_title,
    memo_embed_content,
    memo_created_timestamp,
    memo_updated_timestamp,
    memo_created_user
)
SELECT
    p.point_id                           AS memo_point,
    'Document for ' || p.point_title     AS memo_title,
    p.document                           AS memo_embed_content,
    p.point_created_timestamp            AS memo_created_timestamp,
    p.point_created_timestamp            AS memo_updated_timestamp,
    (SELECT user_id FROM path_user WHERE user_name = 'Admin') AS memo_created_user
FROM point p
WHERE p.document IS NOT NULL;

-- 7) Add new columns to point table
ALTER TABLE point
    ADD COLUMN point_created_user BIGINT;
-- 7a) Populate existing rows with Admin user
UPDATE point
SET point_created_user = (SELECT user_id FROM path_user WHERE user_name = 'Admin');
-- 7b) Enforce NOT NULL and add FK constraint
ALTER TABLE point
    ALTER COLUMN point_created_user SET NOT NULL;
ALTER TABLE point
    ADD CONSTRAINT fk_point_created_user FOREIGN KEY (point_created_user)
      REFERENCES path_user(user_id) ON DELETE RESTRICT;

-- 7c) Add other new columns
ALTER TABLE point
    ADD COLUMN point_summary TEXT,
    ADD COLUMN point_summary_timestamp TIMESTAMPTZ,
    ADD COLUMN point_updated_timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP;

-- 7d) Drop old unused columns
ALTER TABLE point
    DROP COLUMN IF EXISTS objective,
    DROP COLUMN IF EXISTS document;

-- 8) Create point_memo junction table
CREATE TABLE IF NOT EXISTS point_memo (
    point_id BIGINT NOT NULL REFERENCES point(point_id) ON DELETE CASCADE,
    memo_id BIGINT NOT NULL REFERENCES memo(memo_id) ON DELETE CASCADE,
    memo_order INTEGER NOT NULL,
    PRIMARY KEY (point_id, memo_order),
    UNIQUE (memo_id)
);

-- 9) Migrate point_memos data to junction table
INSERT INTO point_memo (point_id, memo_id, memo_order)
SELECT
    p.point_id,
    m.memo_id,
    ROW_NUMBER() OVER (PARTITION BY p.point_id ORDER BY m.memo_id) - 1
FROM point p
JOIN memo m ON m.memo_point = p.point_id;

-- 10) Alter the `edge` table
ALTER TABLE edge
    DROP COLUMN IF EXISTS id,
    DROP COLUMN IF EXISTS created_on;
ALTER TABLE edge
    ADD PRIMARY KEY (origin_point, destination_point);
CREATE INDEX IF NOT EXISTS idx_edge_destination ON edge(destination_point);

-- 11) Create the `file` table
CREATE TABLE IF NOT EXISTS file (
    file_id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_size             BIGINT    NOT NULL,
    file_address          TEXT      NOT NULL,
    file_uploader         BIGINT    NOT NULL REFERENCES path_user(user_id) ON DELETE RESTRICT,
    file_created_timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 12) Create file_memo junction table
CREATE TABLE IF NOT EXISTS file_memo (
    file_id BIGINT NOT NULL REFERENCES file(file_id) ON DELETE CASCADE,
    memo_id BIGINT NOT NULL REFERENCES memo(memo_id) ON DELETE CASCADE,
    PRIMARY KEY (file_id, memo_id)
);

-- 13) Create the `memo_revision` table
CREATE TABLE IF NOT EXISTS memo_revision (
    rev_id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rev_memo          BIGINT    NOT NULL REFERENCES memo(memo_id) ON DELETE CASCADE,
    rev_actor         BIGINT    NOT NULL REFERENCES path_user(user_id) ON DELETE RESTRICT,
    rev_timestamp     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    rev_start_timestamp TIMESTAMPTZ NOT NULL,
    rev_end_timestamp   TIMESTAMPTZ NOT NULL,
    rev_minor_edit    BOOLEAN      NOT NULL DEFAULT FALSE,
    rev_parent_id     BIGINT       NULL REFERENCES memo_revision(rev_id) ON DELETE RESTRICT,
    rev_summary       TEXT,
    rev_content       BIGINT       NOT NULL REFERENCES revision_content(content_id) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_rev_by_memo ON memo_revision(rev_memo);

-- 14) Add foreign key from memo.latest_revision to memo_revision
ALTER TABLE memo
    ADD CONSTRAINT fk_memo_latest_revision FOREIGN KEY (memo_latest_revision)
      REFERENCES memo_revision(rev_id) ON DELETE RESTRICT;

-- 15) Create the `memo_reserve` table
CREATE TABLE IF NOT EXISTS memo_reserve (
    reserve_memo          BIGINT    NOT NULL PRIMARY KEY REFERENCES memo(memo_id) ON DELETE CASCADE,
    reserve_code          VARCHAR(36) NOT NULL UNIQUE DEFAULT gen_random_uuid(),
    reserve_editor        BIGINT    NOT NULL REFERENCES path_user(user_id) ON DELETE CASCADE,
    reserve_timestamp     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    reserve_expire_timestamp TIMESTAMPTZ NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_reserve_by_code ON memo_reserve(reserve_code);

-- 16) Create the `memo_draft` table
CREATE TABLE IF NOT EXISTS memo_draft (
    draft_memo_id            BIGINT    NOT NULL PRIMARY KEY REFERENCES memo(memo_id) ON DELETE CASCADE,
    draft_editor             BIGINT    NOT NULL REFERENCES path_user(user_id) ON DELETE CASCADE,
    draft_created_timestamp  TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    draft_updated_timestamp  TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    draft_content            TEXT      NOT NULL
);

-- 17) Create the `project` table
CREATE TABLE IF NOT EXISTS project (
    project_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_created_user BIGINT NOT NULL REFERENCES path_user(user_id) ON DELETE RESTRICT,
    project_created_timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    project_updated_timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- 18) Create the `project_point` junction table
CREATE TABLE IF NOT EXISTS project_point (
    project_id BIGINT NOT NULL REFERENCES project(project_id) ON DELETE CASCADE,
    point_id BIGINT NOT NULL REFERENCES point(point_id) ON DELETE CASCADE,
    PRIMARY KEY (project_id, point_id)
);

-- 19) Create default project and associate all existing points with it
INSERT INTO project (project_created_user, project_created_timestamp, project_updated_timestamp)
SELECT 
    (SELECT user_id FROM path_user WHERE user_name = 'Admin'),
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP;

INSERT INTO project_point (project_id, point_id)
SELECT 
    (SELECT project_id FROM project ORDER BY project_id DESC LIMIT 1),
    point_id
FROM point;

